# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
conda run -n py310 python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
conda run -n py310 python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
conda run -n py310 python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
conda run -n py310 python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
conda run -n py310 python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

## Database

You can use the `tools/db_utils.py` file to interact with MySQL databases. The following commands are available:

1. Execute SQL query:
```bash
conda run -n py310 python ./tools/db_utils.py query --query "SELECT * FROM users LIMIT 10" [--output-format {csv|json}]
```

2. List all tables in the database:
```bash
conda run -n py310 python ./tools/db_utils.py list-tables
```

3. Describe table structure:
```bash
conda run -n py310 python ./tools/db_utils.py describe-table --table users [--output-format {csv|json}]
```

The database connection parameters are configured in the script with sensible defaults, but you can override them using command-line arguments:
```bash
conda run -n py310 python ./tools/db_utils.py query --query "SELECT * FROM users" --host localhost --port 3306 --username root --password mypassword --dbname mydb
```

## Redis

You can use the `tools/redis_utils.py` file to interact with Redis. The tool accepts Redis commands directly as arguments:

```bash
conda run -n py310 python ./tools/redis_utils.py get mykey
conda run -n py310 python ./tools/redis_utils.py set mykey myvalue
conda run -n py310 python ./tools/redis_utils.py del mykey
conda run -n py310 python ./tools/redis_utils.py keys "user:*"
```

Supported Redis commands:
- `get` - Get value of a key
- `set` - Set value of a key (with optional expiration: `set mykey myvalue EX 3600`)
- `del` - Delete one or more keys
- `keys` - List keys matching a pattern
- `hget` - Get field from a hash
- `hgetall` - Get all fields from a hash
- `hset` - Set field in a hash
- `lrange` - Get elements from a list
- `lpush` - Push element to the left of a list
- `rpush` - Push element to the right of a list

You can override the Redis connection parameters:
```bash
conda run -n py310 python ./tools/redis_utils.py --host redis-server --port 6380 --db 1 get mykey
```

# Lessons

## User Specified Lessons

- You have a conda environment named py310. Use it with `conda run -n py310 python`.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad
